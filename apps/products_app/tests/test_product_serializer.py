# Generated by CodiumAI
from apps.products_app.models import Product, Format, Classification
from apps.products_app.serializers.product import ProductSerializer
from model_bakery import baker


import pytest


class TestProductSerializer:
    # Ensure that the serializer can serialize a valid Product instance
    @pytest.mark.django_db
    def test_serialize_valid_product_instance(self):
        # Create a valid Product instance
        product = Product(
            name="Test Product",
            format=baker.make(Format, name="Test Format"),
            description="Test Description",
            classification=baker.make(Classification, name="Test Classification"),
        )

        # Serialize the Product instance
        serializer = ProductSerializer(product)
        serialized_data = serializer.data

        # Assert that all fields are serialized correctly
        assert serialized_data["name"] == "Test Product"
        assert Format.objects.get(id=serialized_data["format"]).name == "Test Format"
        assert serialized_data["description"] == "Test Description"
        assert (
            Classification.objects.get(id=serialized_data["classification"]).name
            == "Test Classification"
        )

    # Ensure that the serializer can deserialize a valid Product payload
    @pytest.mark.django_db
    def test_deserialize_valid_product_payload(self):
        # Create a valid Product payload
        payload = {
            "name": "Test Product",
            "format": baker.make(Format, name="Test Format").id,
            "description": "Test Description",
            "classification": baker.make(Classification, name="Test Classification").id,
        }

        # Deserialize the Product payload
        serializer = ProductSerializer(data=payload)
        serializer.is_valid()
        deserialized_data = serializer.validated_data

        # Assert that all fields are deserialized correctly
        assert deserialized_data["name"] == "Test Product"
        assert deserialized_data["description"] == "Test Description"

    # Ensure that the serializer can update an existing Product instance
    @pytest.mark.django_db
    def test_update_existing_product_instance(self):
        # Create an existing Product instance
        existing_product = baker.make(Product, name="Existing Product")

        # Create a payload to update the existing Product instance
        payload = {
            "name": "Updated Product",
            "format": baker.make(Format, name="Updated Format").id,
            "description": "Updated Description",
            "classification": baker.make(
                Classification, name="Updated Classification"
            ).id,
        }

        # Update the existing Product instance
        serializer = ProductSerializer(existing_product, data=payload, partial=True)
        serializer.is_valid()
        updated_product = serializer.save()

        # Assert that the existing Product instance is updated correctly
        assert updated_product.name == "Updated Product"
        assert updated_product.description == "Updated Description"
        assert updated_product.classification.name == "Updated Classification"

    # Ensure that the serializer raises a validation error when required fields are missing
    @pytest.mark.django_db
    def test_validation_error_missing_required_fields(self):
        # Create a payload with missing required fields
        payload = {}

        # Try to deserialize the payload
        serializer = ProductSerializer(data=payload)
        with pytest.raises(Exception):
            serializer.is_valid(raise_exception=True)

    # Ensure that the serializer raises a validation error when fields have invalid types
    @pytest.mark.django_db
    def test_validation_error_invalid_field_types(self):
        # Create a payload with fields of invalid types
        payload = {
            "name": 123,
            "format": "Invalid Format",
            "description": 456,
            "classification": "Invalid Classification",
        }

        # Try to deserialize the payload
        serializer = ProductSerializer(data=payload)
        with pytest.raises(Exception):
            serializer.is_valid(raise_exception=True)

    # Ensure that the serializer raises a validation error when fields have invalid values
    @pytest.mark.django_db
    def test_validation_error_invalid_field_values(self):
        # Create a payload with fields of invalid values
        payload = {
            "name": "",
            "format": baker.make(Format, name="Test Format").id,
            "description": "Test Description",
            "classification": baker.make(Classification, name="Test Classification").id,
        }

        # Try to deserialize the payload
        serializer = ProductSerializer(data=payload)
        with pytest.raises(Exception):
            serializer.is_valid(raise_exception=True)
