# Generated by CodiumAI
import random
from apps.products_app.models import Product
from apps.products_app.models.packaging import GroupingPackaging
from apps.products_app.models.plan import Plan
from apps.products_app.models.production import Production
from model_bakery import baker
from django.urls import reverse
from rest_framework import status

import pytest


@pytest.mark.django_db
class TestProductionViewSet:
    # can retrieve a list of all productions

    def test_retrieve_all_productions(self, client):
        client.login(username="admin", password="1qazxsw2")
        baker.make(Production, _quantity=random.randint(20, 30))
        response = client.get(reverse("production-list"))
        assert response.status_code == status.HTTP_200_OK
        assert response.data["count"] == Production.objects.count()

    # can retrieve a single production by id
    def test_retrieve_single_production(self, client):
        client.login(username="admin", password="1qazxsw2")
        production = baker.make(Production)
        response = client.get(reverse("production-detail", args=[production.id]))
        assert response.status_code == status.HTTP_200_OK
        assert response.data["id"] == production.id

    # can create a new production

    def test_create_new_production(self, client):
        client.login(username="admin", password="1qazxsw2")

        plan = baker.make(Plan)
        data = {
            "name": "Test Production",
            "product": baker.make(Product, classification_id=plan.product_kind_id).id,
            "distribution_format": baker.make(GroupingPackaging).id,
            "plan": plan.id,
            "wholesale_price": 10.00,
            "quantity": 100,
            "cost": 50.00,
            "description": "Test description",
            "active": True,
            "production_date": "2022-01-01",
        }
        response = client.post(reverse("production-list"), data=data)
        assert response.status_code == status.HTTP_201_CREATED
        assert Production.objects.filter(name="Test Production").exists()

    # attempting to create a production with an invalid product should return a validation error

    def test_create_production_with_invalid_product(self, client):
        client.login(username="admin", password="1qazxsw2")
        data = {
            "name": "Test Production",
            "product": 9999,  # Invalid product ID
            "distribution_format": baker.make(GroupingPackaging).id,
            "wholesale_price": 10.00,
            "quantity": 100,
            "cost": 50.00,
            "description": "Test description",
            "active": True,
            "production_date": "2022-01-01",
        }
        response = client.post(reverse("production-list"), data=data)
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert "product" in response.data

    # attempting to create a production with an invalid plan should return a validation error

    def test_create_production_with_invalid_plan(self, client):
        client.login(username="admin", password="1qazxsw2")
        data = {
            "name": "Test Production",
            "product": baker.make(Product).id,
            "distribution_format": baker.make(GroupingPackaging).id,
            "wholesale_price": 10.00,
            "quantity": 100,
            "cost": 50.00,
            "description": "Test description",
            "active": True,
            "production_date": "2022-01-01",
            "plan": 9999,  # Invalid plan ID
        }
        response = client.post(reverse("production-list"), data=data)
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert "plan" in response.data

    # attempting to create a production with a duplicate product, distribution format, and wholesale price combination should return a validation error

    def test_create_production_with_duplicate_combination(self, client):
        client.login(username="admin", password="1qazxsw2")
        existing_production = baker.make(Production)
        data = {
            "name": "Test Production",
            "product": existing_production.product.id,
            "distribution_format": existing_production.distribution_format.id,
            "wholesale_price": existing_production.wholesale_price,
            "quantity": 100,
            "cost": 50.00,
            "description": "Test description",
            "active": True,
            "plan": baker.make(Plan).id,
            "production_date": "2022-01-01",
        }
        response = client.post(reverse("production-list"), data=data)
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert "non_field_errors" in response.data
